import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from typing import Dict, List, Optional, Tuple


def watershed(img: np.ndarray, img_ori: np.ndarray, thresh = 0.20, kernel: Tuple = (3,3), thresh_pre = 30, dia_iter = 3):
    ''' Excute watershed transform on the original image (img_ori must be a 3-channel image) based on a processed binary image.
    Returns the marker image generated by watershed transform and the segmented image based on img_ori. They are stored in a tuple.
    Value of thersh_pre, thresh_dist and kernel must be adjusted according to the processed image.
    '''

    kernel = np.ones(kernel, np.uint8)

    _, img = cv2.threshold(img, thresh_pre, 255, 0)
    img = cv2.bitwise_not(img)
    sure_bg = cv2.dilate(img, kernel, iterations = dia_iter)

    dist = cv2.distanceTransform(img, cv2.DIST_L2, 5)
    cv2.normalize(dist, dist, 0, 1.0, cv2.NORM_MINMAX)

    _,sure_fg = cv2.threshold(dist, thresh*dist.max(), 255, 0)
    sure_fg = np.uint8(sure_fg)

    unknown = cv2.subtract(sure_bg, sure_fg)

    _, markers = cv2.connectedComponents(sure_fg)
    markers = markers + 1
    markers[unknown == 255] = 0
    
    markers = cv2.watershed(img_ori, markers)
    img_ori[markers == -1] = [0, 0, 255]

    return markers, img_ori


img_ori = cv2.imread(r'C:\Users\Xin Wenkang\Documents\Scripts\IPHC\Pics\MIPAR_image.png')

img_fft_rec = cv2.imread(r'C:\Users\Xin Wenkang\Documents\Scripts\IPHC\Pics\MIPAR\Rectangular\Rectangular Mask on Otsu on Gaussian 09.png', 0)

img_otsu = cv2.imread(r'C:\Users\Xin Wenkang\Documents\Scripts\IPHC\Pics\MIPAR\Otsu Threshold\Otsu on Gaussian 05.png', 0)

result_otsu = watershed(img_otsu, img_ori, thresh=0.15, thresh_pre=30, kernel=(3, 3), dia_iter=3)

img_ori = cv2.imread(r'C:\Users\Xin Wenkang\Documents\Scripts\IPHC\Pics\MIPAR_image.png')

result_rec = watershed(img_fft_rec, img_ori, thresh=0.10, thresh_pre=30, kernel=(3, 3), dia_iter=3)

cv2.namedWindow('image1', cv2.WINDOW_AUTOSIZE)
cv2.imshow('image1', result_rec[1])
cv2.waitKey()

cv2.imwrite('MIPAR_segmented.png', result_rec[1])

np.save('Marker_MIPAR', result_rec[0])

plt.imsave('Marker_MIPAR.png', result_rec[0])

cv2.namedWindow('image2', cv2.WINDOW_AUTOSIZE)
cv2.imshow('image2', result_otsu[1])
cv2.waitKey()

'''fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,15))
ax1.imshow(result_rec[0])
ax2.imshow(result_otsu[0])
plt.show()'''

'''fig, axe = plt.subplots(1, 1, figsize=(15,15))
axe.imshow(result_rec[0])
plt.show()'''