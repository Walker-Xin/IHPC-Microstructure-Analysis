import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from typing import Dict, List, Optional, Tuple


def watershed(img: np.ndarray, img_ori: np.ndarray, thresh = 0.20, kernel: Tuple = (3,3), thresh_pre = 30, dia_iter = 3):
    ''' Excute watershed transform on the original image (img_ori must be a 3-channel image) based on a processed binary image.
    Returns the marker image generated by watershed transform and the segmented image based on img_ori.
    Value of thersh_pre, thresh_dist and kernel must be adjusted according to the processed image.
    '''

    kernel = np.ones(kernel, np.uint8)

    _, img = cv2.threshold(img, thresh_pre, 255, 0)
    img = cv2.bitwise_not(img)
    sure_bg = cv2.dilate(img, kernel, iterations = dia_iter)

    dist = cv2.distanceTransform(img, cv2.DIST_L2, 5)
    cv2.normalize(dist, dist, 0, 1.0, cv2.NORM_MINMAX)

    _,sure_fg = cv2.threshold(dist, thresh*dist.max(), 255, 0)
    sure_fg = np.uint8(sure_fg)

    unknown = cv2.subtract(sure_bg, sure_fg)

    _, markers = cv2.connectedComponents(sure_fg)
    markers = markers + 1
    markers[unknown == 255] = 0
    
    watershed_markers = []
    watershed_markers = cv2.watershed(img_ori, markers)
    img_ori[markers == -1] = [0, 0, 255]

    return watershed_markers, img_ori, sure_bg, dist, sure_fg, unknown, markers

